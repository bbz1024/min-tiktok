// Code generated by goctl. DO NOT EDIT.

package videoInfo

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videoinfoFieldNames          = builder.RawFieldNames(&Videoinfo{})
	videoinfoRows                = strings.Join(videoinfoFieldNames, ",")
	videoinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(videoinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videoinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(videoinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	videoinfoModel interface {
		Insert(ctx context.Context, data *Videoinfo) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Videoinfo, error)
		Update(ctx context.Context, data *Videoinfo) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultVideoinfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Videoinfo struct {
		Id           uint64         `db:"id"`           // id
		Videoid      uint64         `db:"videoid"`      // 视频id
		Videosummery sql.NullString `db:"videosummery"` // 视频摘要
		Keyword      sql.NullString `db:"keyword"`      // 关键词
		Category     sql.NullString `db:"category"`     // 分类
		CreatedAt    time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`   // 更新时间
	}
)

func newVideoinfoModel(conn sqlx.SqlConn) *defaultVideoinfoModel {
	return &defaultVideoinfoModel{
		conn:  conn,
		table: "`videoinfo`",
	}
}

func (m *defaultVideoinfoModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVideoinfoModel) FindOne(ctx context.Context, id uint64) (*Videoinfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videoinfoRows, m.table)
	var resp Videoinfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoinfoModel) Insert(ctx context.Context, data *Videoinfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, videoinfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Videoid, data.Videosummery, data.Keyword, data.Category)
	return ret, err
}

func (m *defaultVideoinfoModel) Update(ctx context.Context, data *Videoinfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videoinfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Videoid, data.Videosummery, data.Keyword, data.Category, data.Id)
	return err
}

func (m *defaultVideoinfoModel) tableName() string {
	return m.table
}

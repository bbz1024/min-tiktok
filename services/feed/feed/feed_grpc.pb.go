// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Feed_ListVideos_FullMethodName         = "/feed.Feed/ListVideos"
	Feed_ListVideosByUserID_FullMethodName = "/feed.Feed/ListVideosByUserID"
	Feed_ListVideosBySet_FullMethodName    = "/feed.Feed/ListVideosBySet"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	// rpc ListVideosByRecommend(ListFeedRequest) returns (ListFeedResponse);
	// query by created_at
	ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
	// query by user_id 获取某个用户的视频列表
	ListVideosByUserID(ctx context.Context, in *ListVideosByUserIDRequest, opts ...grpc.CallOption) (*ListVideosByUserIDResponse, error)
	// query by set of video_id
	ListVideosBySet(ctx context.Context, in *ListVideosBySetRequest, opts ...grpc.CallOption) (*ListVideosBySetResponse, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListVideosByUserID(ctx context.Context, in *ListVideosByUserIDRequest, opts ...grpc.CallOption) (*ListVideosByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideosByUserIDResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideosByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListVideosBySet(ctx context.Context, in *ListVideosBySetRequest, opts ...grpc.CallOption) (*ListVideosBySetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideosBySetResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideosBySet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	// rpc ListVideosByRecommend(ListFeedRequest) returns (ListFeedResponse);
	// query by created_at
	ListVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error)
	// query by user_id 获取某个用户的视频列表
	ListVideosByUserID(context.Context, *ListVideosByUserIDRequest) (*ListVideosByUserIDResponse, error)
	// query by set of video_id
	ListVideosBySet(context.Context, *ListVideosBySetRequest) (*ListVideosBySetResponse, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) ListVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedFeedServer) ListVideosByUserID(context.Context, *ListVideosByUserIDRequest) (*ListVideosByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideosByUserID not implemented")
}
func (UnimplementedFeedServer) ListVideosBySet(context.Context, *ListVideosBySetRequest) (*ListVideosBySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideosBySet not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideos(ctx, req.(*ListFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListVideosByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideosByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideosByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideosByUserID(ctx, req.(*ListVideosByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListVideosBySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosBySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideosBySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideosBySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideosBySet(ctx, req.(*ListVideosBySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVideos",
			Handler:    _Feed_ListVideos_Handler,
		},
		{
			MethodName: "ListVideosByUserID",
			Handler:    _Feed_ListVideosByUserID_Handler,
		},
		{
			MethodName: "ListVideosBySet",
			Handler:    _Feed_ListVideosBySet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}

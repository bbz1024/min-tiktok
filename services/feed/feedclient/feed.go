// Code generated by goctl. DO NOT EDIT.
// Source: feed.proto

package feedclient

import (
	"context"

	"min-tiktok/services/feed/feed"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ListFeedRequest            = feed.ListFeedRequest
	ListFeedResponse           = feed.ListFeedResponse
	ListVideosByUserIDRequest  = feed.ListVideosByUserIDRequest
	ListVideosByUserIDResponse = feed.ListVideosByUserIDResponse
	UserInfo                   = feed.UserInfo
	Video                      = feed.Video

	Feed interface {
		// rpc ListVideosByRecommend(ListFeedRequest) returns (ListFeedResponse);
		ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
		// query by user_id 获取某个用户的视频列表
		ListVideosByUserID(ctx context.Context, in *ListVideosByUserIDRequest, opts ...grpc.CallOption) (*ListVideosByUserIDResponse, error)
	}

	defaultFeed struct {
		cli zrpc.Client
	}
)

func NewFeed(cli zrpc.Client) Feed {
	return &defaultFeed{
		cli: cli,
	}
}

// rpc ListVideosByRecommend(ListFeedRequest) returns (ListFeedResponse);
func (m *defaultFeed) ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	client := feed.NewFeedClient(m.cli.Conn())
	return client.ListVideos(ctx, in, opts...)
}

// query by user_id 获取某个用户的视频列表
func (m *defaultFeed) ListVideosByUserID(ctx context.Context, in *ListVideosByUserIDRequest, opts ...grpc.CallOption) (*ListVideosByUserIDResponse, error) {
	client := feed.NewFeedClient(m.cli.Conn())
	return client.ListVideosByUserID(ctx, in, opts...)
}

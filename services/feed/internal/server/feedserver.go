// Code generated by goctl. DO NOT EDIT.
// Source: feed.proto

package server

import (
	"context"

	"min-tiktok/services/feed/feed"
	"min-tiktok/services/feed/internal/logic"
	"min-tiktok/services/feed/internal/svc"
)

type FeedServer struct {
	svcCtx *svc.ServiceContext
	feed.UnimplementedFeedServer
}

func NewFeedServer(svcCtx *svc.ServiceContext) *FeedServer {
	return &FeedServer{
		svcCtx: svcCtx,
	}
}

// rpc ListVideosByRecommend(ListFeedRequest) returns (ListFeedResponse);
func (s *FeedServer) ListVideos(ctx context.Context, in *feed.ListFeedRequest) (*feed.ListFeedResponse, error) {
	l := logic.NewListVideosLogic(ctx, s.svcCtx)
	return l.ListVideos(in)
}

func (s *FeedServer) ListRecommendVideos(ctx context.Context, in *feed.ListRecommendRequest) (*feed.ListFeedResponse, error) {
	l := logic.NewListRecommendVideosLogic(ctx, s.svcCtx)
	return l.ListRecommendVideos(in)
}

// query by user_id 获取某个用户的视频列表
func (s *FeedServer) ListVideosByUserID(ctx context.Context, in *feed.ListVideosByUserIDRequest) (*feed.ListVideosByUserIDResponse, error) {
	l := logic.NewListVideosByUserIDLogic(ctx, s.svcCtx)
	return l.ListVideosByUserID(in)
}

// query by set of video_id
func (s *FeedServer) ListVideosBySet(ctx context.Context, in *feed.ListVideosBySetRequest) (*feed.ListVideosBySetResponse, error) {
	l := logic.NewListVideosBySetLogic(ctx, s.svcCtx)
	return l.ListVideosBySet(in)
}

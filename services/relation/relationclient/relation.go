// Code generated by goctl. DO NOT EDIT.
// Source: relation.proto

package relationclient

import (
	"context"

	"min-tiktok/services/relation/relation"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowListRequest      = relation.FollowListRequest
	FollowListResponse     = relation.FollowListResponse
	FollowerListRequest    = relation.FollowerListRequest
	FollowerListResponse   = relation.FollowerListResponse
	FriendListRequest      = relation.FriendListRequest
	FriendListResponse     = relation.FriendListResponse
	IsFollowRequest        = relation.IsFollowRequest
	IsFollowResponse       = relation.IsFollowResponse
	RelationActionRequest  = relation.RelationActionRequest
	RelationActionResponse = relation.RelationActionResponse
	UserInfo               = relation.UserInfo

	Relation interface {
		Follow(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
		Unfollow(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
		GetFollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error)
		GetFollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
		GetFriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
		IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowResponse, error)
	}

	defaultRelation struct {
		cli zrpc.Client
	}
)

func NewRelation(cli zrpc.Client) Relation {
	return &defaultRelation{
		cli: cli,
	}
}

func (m *defaultRelation) Follow(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.Follow(ctx, in, opts...)
}

func (m *defaultRelation) Unfollow(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.Unfollow(ctx, in, opts...)
}

func (m *defaultRelation) GetFollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

func (m *defaultRelation) GetFollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultRelation) GetFriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

func (m *defaultRelation) IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowResponse, error) {
	client := relation.NewRelationClient(m.cli.Conn())
	return client.IsFollow(ctx, in, opts...)
}
